{"version":3,"sources":["Components/contactsForm/StyledContactsForm.js","Components/contactsForm/ContactsForm.js","Components/contactsList/StyledContactsList.js","Components/contactsList/ContactsList.js","Components/contactsSection/ContactsSection.js","Components/contactsFilter/StyledContactsFilter.js","Components/contactsFilter/ContactsFilter.js","redux/actions/actions.js","redux/selectors/selectors.js","Phonebook.js","redux/operations/operations.js","App.js","redux/reducers/reducers.js","redux/store.js","index.js"],"names":["StyledContactsForm","styled","form","ContactsForm","state","contacts","filter","name","number","onHandleSubmit","e","preventDefault","props","onCheckDuplicateName","alert","addContact","setState","onHandleChange","target","value","onSubmit","this","placeholder","type","pattern","title","required","onChange","Component","StyledContactsList","div","ContactsList","deleteContact","map","contact","className","onClick","id","ContactsSection","children","styles","StyledFilterContainer","ContactsFilter","setFilter","createAction","getAllContacts","filterContacts","getContactsSelector","contactsFilter","createSelector","clientName","includes","Contacts","a","addContactOperation","deleteContactOperation","some","getFilteredContacts","toLowerCase","mapDispatchToProps","dispatch","getState","axios","post","data","delete","connect","App","Phonebook","allReducers","createReducer","payload","_","filterContactsReducer","store","configureStore","reducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.469d0620.chunk.js","sourcesContent":["import styled from 'styled-components'\n\nexport const StyledContactsForm = styled.form`\n    width:400px;\n    height: 250px;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-evenly;\n    align-items: flex-start;\n    border-color: black;\n    padding: 15px;\n    border-radius: 2px;\n    box-shadow: 0 1px 3px 0 rgb(0 0 0 / 20%), 0 1px 1px 0 rgb(0 0 0 / 14%), 0 2px 1px -1px rgb(0 0 0 / 12%);\n    margin-bottom: 50px;\n    \ninput {\n    width: 100%;\n  padding: 12px 10px;\n  margin: 8px 0;\n  display: inline-block;\n  border-radius: 4px;\n  box-sizing: border-box;\n  border: 1px solid #ccc8c8;\n  transition: .3s border-color;\n    &:hover {\n  border: 1px solid #0f55eb;\n}\n}\ninput::placeholder {\n  color: rgba(0, 26, 255, 0.336);\n  font-size: 1em;\n  font-style: italic;\n}\n`","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { StyledContactsForm } from './StyledContactsForm.js'\n\n\nclass ContactsForm extends Component {\n    state = {\n        contacts: [],\n        filter: '',\n        name: '',\n        number: ''\n    }\n\n    onHandleSubmit = e => {\n        e.preventDefault();\n        if (this.props.onCheckDuplicateName(this.state.name)) {\n            alert(`${this.state.name} is already in contacts.`);\n            return\n        };\n        this.props.addContact(this.state);\n\n        this.setState({\n            contacts: [],\n            name: \"\",\n            filter: '',\n            number: \"\"\n        });\n    };\n\n\n    onHandleChange = e => {\n        const { name, value } = e.target;\n        this.setState({ [name]: value });\n\n    };\n\n    render() {\n        return (\n            <StyledContactsForm onSubmit={this.onHandleSubmit}>\n                <label>\n                    Name\n          <input\n                        placeholder=\"what's his/her name?\"\n                        type=\"text\"\n                        name=\"name\"\n                        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n                        required\n                        onChange={this.onHandleChange}\n                        value={this.state.name}\n                    />\n                </label>\n                <label>\n                    Number\n          <input\n                        placeholder=\"gimme their number, hun;)\"\n                        type=\"tel\"\n                        name=\"number\"\n                        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n                        required\n                        onChange={this.onHandleChange}\n                        value={this.state.number}\n                    />\n                </label>\n                <button type=\"submit\">Add Contact</button>\n            </StyledContactsForm>\n        );\n    }\n}\n\nContactsForm.propTypes = {\n    onHandleSubmit: PropTypes.func,\n    name: PropTypes.string,\n    number: PropTypes.string,\n}.isRequired;\n\nexport default ContactsForm;\n","import styled from \"styled-components\"\n\nexport const StyledContactsList = styled.div`\n    width:400px;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-evenly;\n    align-items: flex-start;\n    border-color: black;\n    padding: 15px;\n    border-radius: 2px;\n    box-shadow: 0 1px 3px 0 rgb(0 0 0 / 20%), 0 1px 1px 0 rgb(0 0 0 / 14%), 0 2px 1px -1px rgb(0 0 0 / 12%);\n    margin-top: 50px;\n\n.styled-contact-li{\n    display:flex;\n    align-items: center;\n    justify-content: space-between;\n}\n`","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { StyledContactsList } from \"./StyledContactsList\";\n\nconst ContactsList = ({ contacts, deleteContact }) => {\n    return (\n        <StyledContactsList>\n            <ul>\n                {contacts.map(contact => (\n                    <li className=\"styled-contact-li\"\n                        key={contact.id}>\n                        <p>{contact.name}:</p>\n                        <p>{contact.number}</p>\n                        <button type=\"button\" onClick={deleteContact} id={contact.id}>Delete</button>\n                    </li>\n                ))}\n            </ul>\n        </StyledContactsList>\n    );\n};\n\nContactsList.propTypes = {\n    deleteContact: PropTypes.func.isRequired,\n    contacts: PropTypes.arrayOf(PropTypes.shape({\n        id: PropTypes.string,\n        name: PropTypes.string,\n        number: PropTypes.string,\n    }).isRequired),\n}\n\n\nexport default ContactsList;\n","import React from 'react';\n\nconst ContactsSection = ({ title, children, styles }) => {\n    return (\n        <div className={styles}>\n            <h2>{title}</h2>\n            {children}\n        </div>\n    )\n}\n\nexport default ContactsSection;","import styled from 'styled-components'\n\nexport const StyledFilterContainer = styled.div`\n    width:400px;\n    height: 150px;\n    padding: 15px;\n    border-radius: 2px;\n    &:hover{\n        border: 1px solid #0f55eb;\n    box-shadow: 0 1px 3px 0 rgb(0 0 0 / 20%), 0 1px 1px 0 rgb(0 0 0 / 14%), 0 2px 1px -1px rgb(0 0 0 / 12%);\n    background-color: rgba(0, 26, 255, 0.336);\n    }\n\ninput {\n    width: 100%;\n  padding: 12px 10px;\n  margin: 8px 0;\n  display: inline-block;\n  border-radius: 4px;\n  box-sizing: border-box;\n  border: 1px solid #ccc8c8;\n  transition: .3s border-color;\n  \n   \n}\ninput::placeholder {\n  color: rgba(0, 26, 255, 0.336);\n  font-size: 1em;\n  font-style: italic;\n}\n`","import React from 'react';\nimport PropTypes from \"prop-types\";\nimport { StyledFilterContainer } from './StyledContactsFilter';\n\nconst ContactsFilter = ({ filter, setFilter }) => {\n    return (\n        <StyledFilterContainer>\n            <label>\n                <h3>Find contacts by name</h3>\n                <input className=\"filterInput\"\n                    type=\"text\"\n                    value={filter}\n                    onChange={setFilter}\n                    placeholder=\"who is your booty call for tonight? \"\n                />\n            </label>\n        </StyledFilterContainer>\n\n    );\n}\n\nContactsFilter.propTypes = {\n    filter: PropTypes.string,\n    setFilter: PropTypes.func,\n}.isRequired;\n\n\nexport default ContactsFilter;","import { createAction } from \"@reduxjs/toolkit\";\n\nexport const addContact = createAction(\"contacts/addContact\");\nexport const deleteContact = createAction(\"contacts/deleteContact\");\nexport const getAllContacts = createAction(\"contacts/getAllContacts\");\nexport const filterContacts = createAction(\"contacts/filterContacts\");\nexport const setError = createAction(\"contacts/setError\");\nexport const resetError = createAction(\"contacts/resetError\");\n","import { createSelector } from \"@reduxjs/toolkit\";\n\nconst getContactsSelector = state => state.contacts;\nconst contactsFilter = state => state.filter;\n\nexport const getPostsWithTags = createSelector(\n  [getContactsSelector, contactsFilter],\n  (contacts, filter) => contacts.filter(contact => contact.clientName.includes(filter))\n);\n\nexport { getContactsSelector, contactsFilter };\n","import React, { Component } from \"react\";\nimport ContactsForm from \"./Components/contactsForm/ContactsForm\";\nimport ContactsList from \"./Components/contactsList/ContactsList\";\nimport ContactsSection from \"./Components/contactsSection/ContactsSection\";\nimport ContactsFilter from \"./Components/contactsFilter/ContactsFilter\";\nimport { connect } from \"react-redux\";\nimport { getAllContacts, filterContacts } from \"./redux/actions/actions\";\nimport { contactsFilter, getContactsSelector } from \"./redux/selectors/selectors\";\nimport { addContactOperation, deleteContactOperation } from \"./redux/operations/operations\";\n\nclass Contacts extends Component {\n  async componentDidMount() {\n    this.props.getAllContacts();\n  }\n\n  addContact = async contact => {\n    this.props.addContactOperation(contact);\n  };\n\n  deleteContact = async e => {\n    const { id } = e.target;\n    this.props.deleteContactOperation(id);\n  };\n\n  onCheckDuplicateName = name => {\n    return this.props.contacts.some(contact => contact.name === name);\n  };\n\n  setFilter = e => {\n    const { value } = e.target;\n    this.props.filterContacts(value);\n  };\n\n  getFilteredContacts = () => {\n    return this.props.contacts.filter(contact => contact.name.toLowerCase().includes(this.props.filter.toLowerCase()));\n  };\n\n  render() {\n    return (\n      <>\n        <ContactsSection title=\"Phonebook\">\n          <ContactsForm addContact={this.addContact} onCheckDuplicateName={this.onCheckDuplicateName} />\n        </ContactsSection>\n\n        <ContactsSection title=\"Contacts\" styles=\"filterContainerStyle\">\n          <ContactsFilter filter={this.props.filter} setFilter={this.setFilter} />\n        </ContactsSection>\n\n        <ContactsSection>\n          <ContactsList contacts={this.getFilteredContacts()} deleteContact={this.deleteContact} />\n        </ContactsSection>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  contacts: getContactsSelector(state),\n  filter: contactsFilter(state)\n});\n\nconst mapDispatchToProps = {\n  addContactOperation,\n  deleteContactOperation,\n  getAllContacts,\n  filterContacts\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Contacts);\n","import axios from \"axios\";\nimport { addContact, deleteContact, getAllContacts } from \"../actions/actions\";\n\nconst addContactOperation = contact => async (dispatch, getState) => {\n  try {\n    const { data } = await axios.post(`https://bootycall-phonebook-default-rtdb.firebaseio.com/contacts.json`, contact);\n    dispatch(addContact({ ...contact, id: data.name }));\n  } catch (error) {}\n};\n\nconst deleteContactOperation = id => async dispatch => {\n  try {\n    await axios.delete(`https://bootycall-phonebook-default-rtdb.firebaseio.com/contacts/${id}.json`);\n    dispatch(deleteContact(id));\n  } catch (error) {}\n};\n\nconst getAllContactsOperation = contacts => async dispatch => {\n  try {\n    const { data } = await axios.get(`https://bootycall-phonebook-default-rtdb.firebaseio.com/contacts.json`);\n    if (data) {\n      const contacts = Object.keys(data).map(key => ({ id: key, ...data[key] }));\n      dispatch(getAllContacts(contacts));\n    }\n  } catch (error) {}\n};\n\nexport { addContactOperation, deleteContactOperation, getAllContactsOperation };\n","import React from 'react';\nimport Phonebook from './Phonebook'\n\nconst App = () => {\n    return (\n        <>\n            <Phonebook />\n        </>\n    );\n};\n\nexport default App;\n","import { addContact, deleteContact, getAllContacts, filterContacts } from \"../actions/actions\";\nimport { createReducer } from \"@reduxjs/toolkit\";\n\nconst allReducers = createReducer([], {\n  [addContact]: (state, { payload }) => [...state, payload],\n  [deleteContact]: (state, { payload }) => [...state.filter(contact => contact.id !== payload)],\n  [getAllContacts]: (_, { payload }) => payload\n});\n\nconst filterContactsReducer = createReducer(\"\", {\n  [filterContacts]: (_, { payload }) => payload\n});\n\n\nexport { allReducers, filterContactsReducer };\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport { allReducers, filterContactsReducer } from \"./reducers/reducers\";\n\nconst store = configureStore({\n  reducer: {\n    contacts: allReducers,\n    filter: filterContactsReducer\n  }\n});\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux'\nimport store from './redux/store'\n\n\n\nReactDOM.render(                 \n    <Provider store={store}>\n        <App />\n    </Provider>,                   \n    document.getElementById('root')\n)"],"sourceRoot":""}